#!/bin/bash

set -e

export AWS_PAGER=""

# --- Variables ---
REGION="us-west-2"
VPC_CIDR="10.10.0.0/16"
PUBLIC_SUBNET_CIDR="10.10.10.0/24"
PRIVATE_SUBNET_CIDR="10.10.20.0/24"
PRIVATE_SUBNET2_CIDR="10.10.30.0/24"
VPC_NAME="WPVPC"
PRIVATE_SUBNET_NAME="WPVPC-PrivateSubnet"
PRIVATE_SUBNET_NAME2="WPVPC-PrivateSubnet2"
PUBLIC_SUBNET_NAME="WPVPC-PublicSubnet"
RDS_SG_NAME="WPVPC-RDS-MySQL-SG"
RDS_DB_NAME="wordpress"
RDS_DB_USER="wordpress"
RDS_DB_PASS="wordpress"
RDS_INSTANCE_ID="wordpress-db"
RDS_SUBNET_GROUP="wpvpc-private-subnet-group"
WP_INSTANCE_NAME="WPWebServer"
INSTANCE_PROFILE="LabInstanceProfile"
AMI_ID=$(aws ec2 describe-images --owners amazon --filters "Name=name,Values=al2023-ami-2023*" "Name=architecture,Values=x86_64" --region $REGION --query "Images | sort_by(@, &CreationDate)[-1].ImageId" --output text)

# --- 1. VPC & Networking ---
VPC_ID=$(aws ec2 create-vpc --cidr-block $VPC_CIDR --region $REGION --query 'Vpc.VpcId' --output text)
aws ec2 create-tags --resources $VPC_ID --tags Key=Name,Value=$VPC_NAME --region $REGION
aws ec2 modify-vpc-attribute --vpc-id $VPC_ID --enable-dns-support "{\"Value\":true}" --region $REGION
aws ec2 modify-vpc-attribute --vpc-id $VPC_ID --enable-dns-hostnames "{\"Value\":true}" --region $REGION

PUBLIC_SUBNET_ID=$(aws ec2 create-subnet --vpc-id $VPC_ID --cidr-block $PUBLIC_SUBNET_CIDR --availability-zone ${REGION}a --query 'Subnet.SubnetId' --output text --region $REGION)
aws ec2 create-tags --resources $PUBLIC_SUBNET_ID --tags Key=Name,Value=$PUBLIC_SUBNET_NAME --region $REGION
aws ec2 modify-subnet-attribute --subnet-id $PUBLIC_SUBNET_ID --map-public-ip-on-launch --region $REGION

PRIVATE_SUBNET_ID=$(aws ec2 create-subnet --vpc-id $VPC_ID --cidr-block $PRIVATE_SUBNET_CIDR --availability-zone ${REGION}a --query 'Subnet.SubnetId' --output text --region $REGION)
aws ec2 create-tags --resources $PRIVATE_SUBNET_ID --tags Key=Name,Value=$PRIVATE_SUBNET_NAME --region $REGION

PRIVATE_SUBNET2_ID=$(aws ec2 create-subnet --vpc-id $VPC_ID --cidr-block $PRIVATE_SUBNET2_CIDR --availability-zone ${REGION}b --query 'Subnet.SubnetId' --output text --region $REGION)
aws ec2 create-tags --resources $PRIVATE_SUBNET2_ID --tags Key=Name,Value=$PRIVATE_SUBNET_NAME2 --region $REGION

IGW_ID=$(aws ec2 create-internet-gateway --region $REGION --query 'InternetGateway.InternetGatewayId' --output text)
aws ec2 attach-internet-gateway --internet-gateway-id $IGW_ID --vpc-id $VPC_ID --region $REGION
aws ec2 create-tags --resources $IGW_ID --tags Key=Name,Value=WPVPC-IGW --region $REGION

ROUTE_TABLE_ID=$(aws ec2 create-route-table --vpc-id $VPC_ID --region $REGION --query 'RouteTable.RouteTableId' --output text)
aws ec2 create-tags --resources $ROUTE_TABLE_ID --tags Key=Name,Value=WPVPC-PublicRT --region $REGION
aws ec2 create-route --route-table-id $ROUTE_TABLE_ID --destination-cidr-block 0.0.0.0/0 --gateway-id $IGW_ID --region $REGION
aws ec2 associate-route-table --route-table-id $ROUTE_TABLE_ID --subnet-id $PUBLIC_SUBNET_ID --region $REGION

# --- 2. RDS Security Group ---
SG_ID=$(aws ec2 create-security-group \
  --group-name $RDS_SG_NAME \
  --description "Allow MySQL access for RDS in WPVPC" \
  --vpc-id $VPC_ID \
  --region $REGION \
  --query 'GroupId' --output text)
aws ec2 authorize-security-group-ingress \
  --group-id $SG_ID \
  --protocol tcp \
  --port 3306 \
  --cidr $VPC_CIDR \
  --region $REGION

# --- 3. RDS Subnet Group ---
aws rds create-db-subnet-group \
  --db-subnet-group-name $RDS_SUBNET_GROUP \
  --db-subnet-group-description "Private subnet group for WPVPC" \
  --subnet-ids $PRIVATE_SUBNET_ID $PRIVATE_SUBNET2_ID \
  --region $REGION

# --- 4. RDS MySQL Instance ---
aws rds create-db-instance \
  --db-instance-identifier $RDS_INSTANCE_ID \
  --db-instance-class db.t3.micro \
  --engine mysql \
  --allocated-storage 20 \
  --master-username $RDS_DB_USER \
  --master-user-password $RDS_DB_PASS \
  --db-name $RDS_DB_NAME \
  --vpc-security-group-ids $SG_ID \
  --db-subnet-group-name $RDS_SUBNET_GROUP \
  --no-publicly-accessible \
  --backup-retention-period 0 \
  --no-storage-encrypted \
  --no-multi-az \
  --region $REGION

echo "Waiting for RDS instance to be available (this may take several minutes)..."
aws rds wait db-instance-available --db-instance-identifier $RDS_INSTANCE_ID --region $REGION

RDS_ENDPOINT=$(aws rds describe-db-instances --db-instance-identifier $RDS_INSTANCE_ID --region $REGION --query "DBInstances[0].Endpoint.Address" --output text)
echo "RDS Endpoint: $RDS_ENDPOINT"

# --- 5. EC2 Security Group for Web Server ---
WEB_SG_ID=$(aws ec2 create-security-group \
  --group-name WPVPC-WebSG \
  --description "Allow HTTP" \
  --vpc-id $VPC_ID \
  --region $REGION \
  --query 'GroupId' --output text)
aws ec2 authorize-security-group-ingress --group-id $WEB_SG_ID --protocol tcp --port 80 --cidr 0.0.0.0/0 --region $REGION

# --- 6. User Data Script for WordPress ---
USER_DATA=$(cat <<EOF
#!/bin/bash
set -e
exec > /var/log/user-data.log 2>&1

RDS_DB_NAME="$RDS_DB_NAME"
RDS_DB_USER="$RDS_DB_USER"
RDS_DB_PASS="$RDS_DB_PASS"
RDS_ENDPOINT="$RDS_ENDPOINT"

sudo dnf install -y httpd php php-cli php-common php-fpm php-mysqlnd wget tar unzip --allowerasing

sudo systemctl start httpd
sudo systemctl enable httpd

sudo mkdir -p /var/www/html

cd /tmp
wget https://wordpress.org/latest.tar.gz
tar -xzf latest.tar.gz

# Remove default Apache index.html if it exists
sudo rm -f /var/www/html/index.html

# Copy WordPress files (including hidden files) to /var/www/html
sudo cp -r /tmp/wordpress/* /var/www/html/
sudo cp -r /tmp/wordpress/. /var/www/html/

sudo chown -R apache:apache /var/www/html/
sudo find /var/www/html/ -type d -exec chmod 755 {} \;
sudo find /var/www/html/ -type f -exec chmod 644 {} \;
sudo chown -R apache:apache /var/www/html/wp-content
sudo chmod -R 775 /var/www/html/wp-content

cd /var/www/html/
cp wp-config-sample.php wp-config.php
sed -i "s/database_name_here/$RDS_DB_NAME/" wp-config.php
sed -i "s/username_here/$RDS_DB_USER/" wp-config.php
sed -i "s/password_here/$RDS_DB_PASS/" wp-config.php
sed -i "s/localhost/$RDS_ENDPOINT/" wp-config.php

curl -O https://raw.githubusercontent.com/wp-cli/builds/gh-pages/phar/wp-cli.phar
chmod +x wp-cli.phar
sudo mv wp-cli.phar /usr/local/bin/wp

sleep 15

# Fetch public IP with error checking
TOKEN=\$(curl -s -X PUT "http://169.254.169.254/latest/api/token" -H "X-aws-ec2-metadata-token-ttl-seconds: 21600")
PUBLIC_IP=\$(curl -s -H "X-aws-ec2-metadata-token: \$TOKEN" http://169.254.169.254/latest/meta-data/public-ipv4)

echo "PUBLIC_IP is \$PUBLIC_IP" >> /var/log/user-data.log

if [ -z "\$PUBLIC_IP" ]; then
  echo "No public IP found, aborting WordPress install." >> /var/log/user-data.log
  exit 1
fi

sudo -u apache wp core install --path=/var/www/html \
  --url="http://\$PUBLIC_IP" \
  --title="WordPress Site" \
  --admin_user=admin \
  --admin_password=wordpress \
  --admin_email=admin@example.com \
  --skip-email

# Force update siteurl and home in case of any issues
sudo -u apache wp option update siteurl "http://\$PUBLIC_IP" --path=/var/www/html
sudo -u apache wp option update home "http://\$PUBLIC_IP" --path=/var/www/html

EOF
)

# --- 7. Launch EC2 Instance ---
EC2_ID=$(aws ec2 run-instances \
  --image-id $AMI_ID \
  --count 1 \
  --instance-type t3.micro \
  --iam-instance-profile Name=$INSTANCE_PROFILE \
  --security-group-ids $WEB_SG_ID \
  --subnet-id $PUBLIC_SUBNET_ID \
  --user-data "$USER_DATA" \
  --tag-specifications "ResourceType=instance,Tags=[{Key=Name,Value=$WP_INSTANCE_NAME}]" \
  --region $REGION \
  --query 'Instances[0].InstanceId' --output text)

echo "Waiting for EC2 instance to be running..."
aws ec2 wait instance-running --instance-ids $EC2_ID --region $REGION

PUBLIC_IP=$(aws ec2 describe-instances --instance-ids $EC2_ID --region $REGION --query "Reservations[0].Instances[0].PublicIpAddress" --output text)
echo "WordPress is being installed. Access it at: http://$PUBLIC_IP/"

echo "Deployment complete!"
echo "EC2 Public IP: $PUBLIC_IP"
echo "RDS Endpoint: $RDS_ENDPOINT"
echo "To troubleshoot WordPress install, check /var/log/user-data.log on the EC2 instance."
